// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProyectoFinalAp1.Data;

#nullable disable

namespace ProyectoFinalAp1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250406195426_Kitter")]
    partial class Kitter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProyectoFinalAp1.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Carrito", b =>
                {
                    b.Property<int>("CarritoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarritoId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("CarritoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("Carrito");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.CarritoMascotas", b =>
                {
                    b.Property<int>("CarritoMascotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarritoMascotaId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("MascotaId")
                        .HasColumnType("int");

                    b.Property<int?>("MascotasMascotaId")
                        .HasColumnType("int");

                    b.Property<string>("NombreMascota")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CarritoMascotaId");

                    b.HasIndex("MascotaId");

                    b.HasIndex("MascotasMascotaId");

                    b.ToTable("CarritoMascotas");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Citas", b =>
                {
                    b.Property<int>("CitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitaId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MascotasMascotaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreMascota")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CitaId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("MascotasMascotaId");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Donador", b =>
                {
                    b.Property<int>("DonadorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonadorId"));

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DonadorId");

                    b.ToTable("Donador");

                    b.HasData(
                        new
                        {
                            DonadorId = 1,
                            Direccion = "N/A",
                            Email = "N/A",
                            Nombre = "Nadie",
                            Telefono = "0"
                        },
                        new
                        {
                            DonadorId = 2,
                            Direccion = "Calle 1, Santo Domingo",
                            Email = "juanperez@example.com",
                            Nombre = "Juan Pérez",
                            Telefono = "8095551111"
                        },
                        new
                        {
                            DonadorId = 3,
                            Direccion = "Av. Bolívar, Santiago",
                            Email = "mariagomez@example.com",
                            Nombre = "María Gómez",
                            Telefono = "8095552222"
                        },
                        new
                        {
                            DonadorId = 4,
                            Direccion = "Calle Duarte, La Vega",
                            Email = "carloslopez@example.com",
                            Nombre = "Carlos López",
                            Telefono = "8095553333"
                        },
                        new
                        {
                            DonadorId = 5,
                            Direccion = "Calle las Palmas, San Cristóbal",
                            Email = "anarodriguez@example.com",
                            Nombre = "Ana Rodríguez",
                            Telefono = "8295554444"
                        },
                        new
                        {
                            DonadorId = 6,
                            Direccion = "Av. Independencia, Puerto Plata",
                            Email = "pedrosanchez@example.com",
                            Nombre = "Pedro Sánchez",
                            Telefono = "8295555555"
                        },
                        new
                        {
                            DonadorId = 7,
                            Direccion = "Calle Central, Barahona",
                            Email = "luisfernandez@example.com",
                            Nombre = "Luis Fernández",
                            Telefono = "8495556666"
                        },
                        new
                        {
                            DonadorId = 8,
                            Direccion = "Calle Norte, Higuey",
                            Email = "gloriamartinez@example.com",
                            Nombre = "Gloria Martínez",
                            Telefono = "8495557777"
                        },
                        new
                        {
                            DonadorId = 9,
                            Direccion = "Calle Este, Moca",
                            Email = "josedominguez@example.com",
                            Nombre = "José Domínguez",
                            Telefono = "8095558888"
                        },
                        new
                        {
                            DonadorId = 10,
                            Direccion = "Av. Sur, San Pedro",
                            Email = "elenavargas@example.com",
                            Nombre = "Elena Vargas",
                            Telefono = "8295559999"
                        },
                        new
                        {
                            DonadorId = 11,
                            Direccion = "Calle Oeste, Bonao",
                            Email = "ricardojimenez@example.com",
                            Nombre = "Ricardo Jiménez",
                            Telefono = "8095550000"
                        },
                        new
                        {
                            DonadorId = 12,
                            Direccion = "Av. Metropolitana, La Romana",
                            Email = "sofiacastro@example.com",
                            Nombre = "Sofía Castro",
                            Telefono = "8295561111"
                        },
                        new
                        {
                            DonadorId = 13,
                            Direccion = "Calle del Sol, Monte Plata",
                            Email = "andresherrera@example.com",
                            Nombre = "Andrés Herrera",
                            Telefono = "8495562222"
                        },
                        new
                        {
                            DonadorId = 14,
                            Direccion = "Calle Primavera, Baní",
                            Email = "carmenortiz@example.com",
                            Nombre = "Carmen Ortiz",
                            Telefono = "8095563333"
                        },
                        new
                        {
                            DonadorId = 15,
                            Direccion = "Av. Central, Nagua",
                            Email = "franciscomedina@example.com",
                            Nombre = "Francisco Medina",
                            Telefono = "8295564444"
                        },
                        new
                        {
                            DonadorId = 16,
                            Direccion = "Calle del Mar, Samaná",
                            Email = "dianaperez@example.com",
                            Nombre = "Diana Pérez",
                            Telefono = "8495565555"
                        },
                        new
                        {
                            DonadorId = 17,
                            Direccion = "Calle Principal, Azua",
                            Email = "albertorios@example.com",
                            Nombre = "Alberto Ríos",
                            Telefono = "8095566666"
                        },
                        new
                        {
                            DonadorId = 18,
                            Direccion = "Av. Florida, Cotuí",
                            Email = "fernandacastro@example.com",
                            Nombre = "Fernanda Castro",
                            Telefono = "8295567777"
                        },
                        new
                        {
                            DonadorId = 19,
                            Direccion = "Calle Sol Naciente, Jarabacoa",
                            Email = "estebanvargas@example.com",
                            Nombre = "Esteban Vargas",
                            Telefono = "8495568888"
                        },
                        new
                        {
                            DonadorId = 20,
                            Direccion = "Av. Primavera, Hato Mayor",
                            Email = "patriciaherrera@example.com",
                            Nombre = "Patricia Herrera",
                            Telefono = "8095569999"
                        });
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Empleados", b =>
                {
                    b.Property<int>("EmpleadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpleadoId"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaDeContratacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Salario")
                        .HasColumnType("float");

                    b.HasKey("EmpleadoId");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Factura", b =>
                {
                    b.Property<int>("FacturaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacturaId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CarritoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FacturaId");

                    b.HasIndex("CarritoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.FacturaMascota", b =>
                {
                    b.Property<int>("FacturaMascotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacturaMascotaId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CarritoMascotaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("MascotaId")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FacturaMascotaId");

                    b.HasIndex("CarritoMascotaId");

                    b.HasIndex("MascotaId");

                    b.ToTable("FacturaMascotas");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Mascotas", b =>
                {
                    b.Property<int>("MascotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MascotaId"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("DonadorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaDeNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<string>("Raza")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MascotaId");

                    b.HasIndex("DonadorId");

                    b.ToTable("Mascotas");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.ProductoCategorias", b =>
                {
                    b.Property<int>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriaId"));

                    b.Property<string>("IconCSS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoriaId");

                    b.ToTable("ProductoCategorias");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Productos", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductoId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ImagenURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int?>("ProductoCategoriasCategoriaId")
                        .HasColumnType("int");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("TipoCategoria")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductoId");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.HasIndex("ProductoCategoriasCategoriaId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Proveedores", b =>
                {
                    b.Property<int>("ProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProveedorId"));

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProveedorId");

                    b.ToTable("Proveedores");

                    b.HasData(
                        new
                        {
                            ProveedorId = 1,
                            Direccion = "Av. 27 de Febrero #125, Santo Domingo",
                            Email = "contacto@felinosrd.com",
                            Nombre = "Alimentos Felinos RD",
                            Telefono = "8095551234"
                        },
                        new
                        {
                            ProveedorId = 2,
                            Direccion = "Calle Duarte #45, Santiago",
                            Email = "ventas@nutrican.com.do",
                            Nombre = "NutriCan Dominicana",
                            Telefono = "8295555678"
                        },
                        new
                        {
                            ProveedorId = 3,
                            Direccion = "Calle Las Flores #12, La Vega",
                            Email = "info@mascoterosrd.com",
                            Nombre = "Juguetes Mascoteros",
                            Telefono = "8495559012"
                        },
                        new
                        {
                            ProveedorId = 4,
                            Direccion = "Av. Independencia #78, San Cristóbal",
                            Email = "pedidos@accesoriospet.com",
                            Nombre = "Accesorios Pet",
                            Telefono = "8095553456"
                        },
                        new
                        {
                            ProveedorId = 5,
                            Direccion = "Calle Salud #33, Puerto Plata",
                            Email = "farmacia@vetrd.com",
                            Nombre = "Farmacia Veterinaria RD",
                            Telefono = "8295557890"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProyectoFinalAp1.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProyectoFinalAp1.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoFinalAp1.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProyectoFinalAp1.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Carrito", b =>
                {
                    b.HasOne("ProyectoFinalAp1.Models.Productos", "Producto")
                        .WithMany("Carritos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.CarritoMascotas", b =>
                {
                    b.HasOne("ProyectoFinalAp1.Models.Mascotas", "Mascota")
                        .WithMany()
                        .HasForeignKey("MascotaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProyectoFinalAp1.Models.Mascotas", null)
                        .WithMany("CarritoMascotas")
                        .HasForeignKey("MascotasMascotaId");

                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Citas", b =>
                {
                    b.HasOne("ProyectoFinalAp1.Models.Empleados", "Empleado")
                        .WithMany("Cita")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProyectoFinalAp1.Models.Mascotas", null)
                        .WithMany("Cita")
                        .HasForeignKey("MascotasMascotaId");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Factura", b =>
                {
                    b.HasOne("ProyectoFinalAp1.Models.Carrito", "Carritos")
                        .WithMany("Facturas")
                        .HasForeignKey("CarritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoFinalAp1.Models.Productos", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Carritos");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.FacturaMascota", b =>
                {
                    b.HasOne("ProyectoFinalAp1.Models.CarritoMascotas", "CarritoMascotas")
                        .WithMany()
                        .HasForeignKey("CarritoMascotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoFinalAp1.Models.Mascotas", "Mascotas")
                        .WithMany()
                        .HasForeignKey("MascotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarritoMascotas");

                    b.Navigation("Mascotas");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Mascotas", b =>
                {
                    b.HasOne("ProyectoFinalAp1.Models.Donador", "Donador")
                        .WithMany()
                        .HasForeignKey("DonadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donador");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Productos", b =>
                {
                    b.HasOne("ProyectoFinalAp1.Models.ProductoCategorias", null)
                        .WithMany("Producto")
                        .HasForeignKey("ProductoCategoriasCategoriaId");

                    b.HasOne("ProyectoFinalAp1.Models.Proveedores", "Proveedores")
                        .WithMany()
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Carrito", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Empleados", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Mascotas", b =>
                {
                    b.Navigation("CarritoMascotas");

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.ProductoCategorias", b =>
                {
                    b.Navigation("Producto");
                });

            modelBuilder.Entity("ProyectoFinalAp1.Models.Productos", b =>
                {
                    b.Navigation("Carritos");
                });
#pragma warning restore 612, 618
        }
    }
}
