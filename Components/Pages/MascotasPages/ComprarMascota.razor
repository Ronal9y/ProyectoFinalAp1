@page "/Mascota/ComprarMascota"
@inject MascotasService mascotasService
@inject DonadorService donadoresService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Reponer Stock</PageTitle>

<EditForm Model="@mascotas" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Nueva Mascota</h5>
            </div>

            <div class="card-body">
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @ErrorMessage
                    </div>
                }

                <div class="mb-3">
                    <label class="form-label"><strong>Tipo de Animal</strong></label>
                    <InputText class="form-control" @bind-Value="@mascotas.Tipo" />
                    <ValidationMessage For="@(() => mascotas.Tipo)" />
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Raza</strong></label>
                    <InputText class="form-control" @bind-Value="@mascotas.Raza" />
                    <ValidationMessage For="@(() => mascotas.Raza)" />
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Fecha de Nacimiento</strong></label>
                    <InputDate class="form-control" @bind-Value="@mascotas.FechaDeNacimiento" />
                    <ValidationMessage For="@(() => mascotas.FechaDeNacimiento)" />
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Imagen de la Mascota</strong></label>
                    @if (!string.IsNullOrEmpty(mascotas.ImageURL))
                    {
                        <div class="mb-2">
                            <img src="@mascotas.ImageURL" class="img-thumbnail" style="max-height: 200px;" />
                        </div>
                    }
                    <InputFile OnChange="HandleFileUpload" accept="image/*" class="form-control mb-2" />
                    <InputText class="form-control" @bind-Value="@mascotas.ImageURL" placeholder="O ingrese URL de imagen" />
                    <small class="text-muted">Formatos aceptados: JPG, PNG, GIF (Máx. 2MB)</small>
                    <ValidationMessage For="@(() => mascotas.ImageURL)" />
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Precio</strong></label>
                    <InputNumber class="form-control" @bind-Value="@mascotas.Precio" />
                    <ValidationMessage For="@(() => mascotas.Precio)" />
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Cantidad en Existencia</strong></label>
                    <InputNumber class="form-control" @bind-Value="@mascotas.Cantidad" />
                    <ValidationMessage For="@(() => mascotas.Cantidad)" />
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Donador</strong></label>
                    <InputSelect class="form-control" @bind-Value="@mascotas.DonadorId">
                        <option value="">Seleccione un Donador</option>
                        @foreach (var donador in ListaDonadores)
                        {
                            <option value="@donador.DonadorId">@donador.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => mascotas.DonadorId)" />
                </div>
            </div>

            <div class="card-footer text-center mt-2">
                <button class="btn btn-secondary" @onclick="VolverAlIndice">
                    <span class="bi bi-arrow-left"></span> Volver al Índice
                </button>
                <button type="submit" class="btn btn-primary bi bi-floppy"> Guardar Producto</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public ProyectoFinalAp1.Models.Mascotas mascotas { get; set; } = new ProyectoFinalAp1.Models.Mascotas();
    public List<ProyectoFinalAp1.Models.Donador> ListaDonadores { get; set; } = new List<ProyectoFinalAp1.Models.Donador>();
    public string ErrorMessage { get; set; } = string.Empty;

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file.Size > 2 * 1024 * 1024)
            {
                ErrorMessage = "La imagen es demasiado grande (Máximo 2MB)";
                return;
            }
            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".webp" };
            var fileExtension = Path.GetExtension(file.Name).ToLower();
            if (!allowedExtensions.Contains(fileExtension))
            {
                ErrorMessage = "Formato de imagen no soportado. Use JPG, PNG o GIF";
                return;
            }
            var fileName = $"{Guid.NewGuid()}{fileExtension}";
            var folderPath = Path.Combine("wwwroot", "uploads", "mascotas");
            var fullPath = Path.Combine(Directory.GetCurrentDirectory(), folderPath);
            if (!Directory.Exists(fullPath))
            {
                Directory.CreateDirectory(fullPath);
            }
            var path = Path.Combine(fullPath, fileName);
            await using var stream = new FileStream(path, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(stream);
            mascotas.ImageURL = $"/uploads/mascotas/{fileName}";
            ErrorMessage = string.Empty;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error al subir la imagen: {ex.Message}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ListaDonadores = await donadoresService.Listar();
    }

    private async Task OnValidSubmit()
    {
        try
        {
            if (await mascotasService.Guardar(mascotas))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Producto guardado correctamente");
                navigationManager.NavigateTo("/Mascota/Index");
            }
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            ErrorMessage = "Ocurrió un error inesperado. Por favor, intenta nuevamente.";
        }
    }

    private void VolverAlIndice()
    {
        navigationManager.NavigateTo("/Mascota/Index");
    }
}
