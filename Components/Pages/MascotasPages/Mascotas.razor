@page "/Mascota/IndexAdmin"
@using System.Linq.Expressions
@inject MascotasService mascotasService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Índice de Mascotas</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header bg-orange">
            <h5 class="card-title mb-0">Listado de Mascotas</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3 justify-content-between">
                <div class="col-md-9 d-flex align-items-end search-container">
                    <!-- Grupo de búsqueda (izquierda) -->
                    <div class="input-group" style="width: 180px;">
                        <select class="form-select" @bind="CriterioBusqueda">
                            <option value="Todos">Todos</option>
                            <option value="Id">ID</option>
                            <option value="Tipo">Tipo</option>
                            <option value="Raza">Raza</option>
                        </select>
                    </div>

                    <div class="input-group" style="width: 250px;">
                        <input type="text" class="form-control" @bind="TextoBusqueda" placeholder="Ingrese su búsqueda..." />
                    </div>

                    <button class="btn btn-orange btn-sm btn-custom1" @onclick="BuscarMascotas">
                        <i class="bi bi-search"></i> Buscar
                    </button>

                    <button class="btn btn-secondary btn-sm btn-custom1" @onclick="LimpiarFiltros">
                        <i class="bi bi-arrow-counterclockwise"></i> Limpiar
                    </button>
                </div>

                <div class="col-md-3 d-flex align-items-end justify-content-end">
                    <!-- Botón de agregar (derecha) -->
                    <button class="btn btn-success btn-sm btn-custom" @onclick="NuevaMascota">
                        <i class="bi bi-plus-circle"></i> Nueva Mascota
                    </button>
                </div>
            </div>

            @if (!mascotas.Any())
            {
                <div class="alert alert-warning text-center">No se encontraron Mascotas con los criterios especificados</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr class="table-orange">
                                <th>ID</th>
                                <th>Tipo</th>
                                <th>Raza</th>
                                <th>Fecha de Nacimiento</th>
                                <th>Precio</th>
                                <th>Cantidad</th>
                                <th>Imagen</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var mascota in mascotas)
                            {
                                <tr>
                                    <td>@mascota.MascotaId</td>
                                    <td>@mascota.Tipo</td>
                                    <td>@(mascota.Raza?.Length > 30 ? mascota.Raza.Substring(0, 30) + "..." : mascota.Raza)</td>
                                    <td>@mascota.FechaDeNacimiento.ToShortDateString()</td>
                                    <td>@mascota.Precio.ToString("C")</td>
                                    <td>@mascota.Cantidad</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(mascota.ImageURL))
                                        {
                                            <img src="@mascota.ImageURL" style="width: 50px; height: auto;" class="img-thumbnail" />
                                        }
                                        else
                                        {
                                            <span class="text-muted">Sin imagen</span>
                                        }
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditarMascota(mascota.MascotaId)">
                                            <i class="bi bi-pencil"></i> Editar
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmarEliminar(mascota.MascotaId)">
                                            <i class="bi bi-trash"></i> Eliminar
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<ProyectoFinalAp1.Models.Mascotas> mascotas = new List<ProyectoFinalAp1.Models.Mascotas>();
    private string CriterioBusqueda = "Todos";
    private string TextoBusqueda = string.Empty;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarMascotas();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar mascotas: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CargarMascotas()
    {
        try
        {
            var mascotasDb = await mascotasService.ListarMascotas();
            mascotas = mascotasDb?.ToList() ?? new List<ProyectoFinalAp1.Models.Mascotas>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al obtener mascotas: {ex.Message}";
            mascotas = new List<ProyectoFinalAp1.Models.Mascotas>();
            Console.WriteLine(errorMessage);
        }
    }

    private async Task BuscarMascotas()
    {
        try
        {
            var query = await mascotasService.ListarMascotas();

            if (!string.IsNullOrWhiteSpace(TextoBusqueda))
            {
                if (CriterioBusqueda == "Id" && int.TryParse(TextoBusqueda, out int id))
                {
                    query = query.Where(m => m.MascotaId == id).ToList();
                }
                else if (CriterioBusqueda == "Tipo")
                {
                    query = query.Where(m => m.Tipo.Contains(TextoBusqueda, StringComparison.OrdinalIgnoreCase)).ToList();
                }
                else if (CriterioBusqueda == "Raza")
                {
                    query = query.Where(m => m.Raza.Contains(TextoBusqueda, StringComparison.OrdinalIgnoreCase)).ToList();
                }
                else
                {
                    query = query.Where(m =>
                        m.Tipo.Contains(TextoBusqueda, StringComparison.OrdinalIgnoreCase) ||
                        m.Raza.Contains(TextoBusqueda, StringComparison.OrdinalIgnoreCase) ||
                        m.MascotaId.ToString().Contains(TextoBusqueda)).ToList();
                }
            }

            mascotas = query;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al buscar mascotas: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
        }
    }

    private async Task LimpiarFiltros()
    {
        TextoBusqueda = string.Empty;
        CriterioBusqueda = "Todos";
        await CargarMascotas();
    }

    private void NuevaMascota()
    {
        navigationManager.NavigateTo("/Mascota/ComprarMascota");
    }

    private void EditarMascota(int id)
    {
        navigationManager.NavigateTo($"/Mascota/EditarMascota/{id}");
    }

    private async Task ConfirmarEliminar(int id)
    {
        bool confirmado = await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro que desea eliminar esta mascota?");
        if (confirmado)
        {
            try
            {
                await mascotasService.Eliminar(id);
                await CargarMascotas();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error al eliminar: {ex.Message}");
            }
        }
    }
}