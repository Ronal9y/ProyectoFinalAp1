@page "/Mascota/Index"
@using System.Linq.Expressions
@using ProyectoFinalAp1.Models
@inject MascotasService mascotasService
@inject CarritoMascotasService carritoMascotasService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Mascotas Disponibles</PageTitle>

<div class="card shadow-lg">
    <div class="card-header bg-dark text-white py-2 rounded">
        <div class="d-flex justify-content-between align-items-center">
            <h3 class="font-weight-bold text-center w-100">Mascotas Disponibles</h3>
            <a href="/CarritoMascotas" class="btn btn-outline-light position-relative">
                <i class="bi bi-cart-fill"></i>
                @if (totalMascotas > 0)
                {
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                        @totalMascotas
                    </span>
                }
            </a>
        </div>
    </div>

    <div class="row mb-3 align-items-center px-3">
        <div class="col-md-3">
            <label for="Filtro" class="form-label">Filtrar por:</label>
            <select class="form-select" @bind="CriterioBusqueda">
                <option value="Todos">Todos</option>
                <option value="Id">ID</option>
                <option value="Tipo">Tipo</option>
                <option value="Raza">Raza</option>
            </select>
        </div>
        <div class="col-md-6">
            <label for="ValorFiltro" class="form-label">Búsqueda:</label>
            <div class="input-group">
                <input type="text" class="form-control"
                       @bind="TextoBusqueda"
                       placeholder="Ingrese su búsqueda..." />
                <button class="btn btn-primary" type="button" @onclick="BuscarMascotas">
                    <i class="bi bi-search"></i> Buscar
                </button>
                <button class="btn btn-outline-secondary" @onclick="LimpiarFiltros">
                    <i class="bi bi-x-circle"></i> Limpiar
                </button>
            </div>
        </div>
    </div>

    <div class="row p-3">
        @if (!mascotas.Any())
        {
            <div class="col-12">
                <div class="alert alert-warning text-center">No se encontraron mascotas con los criterios especificados</div>
            </div>
        }
        else
        {
            @foreach (var mascota in mascotas)
            {
                <div class="col-md-4 mb-4">
                    <div class="card h-100">
                        @if (!string.IsNullOrEmpty(mascota.ImageURL))
                        {
                            <div class="text-center mb-3" style="height: 280px; overflow: hidden;">
                                <img src="@mascota.ImageURL"
                                     class="img-fluid rounded"
                                     style="width: 100%; height: 100%; object-fit: cover;"
                                     alt="@mascota.Tipo" />
                            </div>
                        }
                        <div class="card-body">
                            <h5 class="card-title">@mascota.Tipo</h5>
                            <p class="card-text text-muted"><strong>ID:</strong> @mascota.MascotaId</p>

                            <div class="mb-2">
                                <p class="mb-1"><strong>Raza:</strong><span class="badge bg-primary"> @mascota.Raza</span></p>
                                <p class="mb-1"><strong>Fecha Nacimiento:</strong> @mascota.FechaDeNacimiento.ToShortDateString()</p>
                                <p class="mb-1"><strong>Donador:</strong> @mascota.Donador?.Nombre</p>
                            </div>

                            <div class="d-flex justify-content-between mb-2">
                                <span class="text-muted"><strong>Disponibles:</strong> @mascota.Cantidad</span>
                                <span class="text-success fw-bold">@mascota.Precio.ToString("C")</span>
                            </div>

                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <div class="input-group" style="width: 150px;">
                                    <button class="btn btn-outline-secondary" @onclick="() => AjustarCantidad(mascota, -1)" disabled="@(mascota.CantidadSeleccionada <= 1)">
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <input type="number" class="form-control text-center"
                                           @bind="@mascota.CantidadSeleccionada"
                                           @bind:event="oninput"
                                           min="1"
                                           max="@mascota.Cantidad" />
                                    <button class="btn btn-outline-secondary" @onclick="() => AjustarCantidad(mascota, 1)" disabled="@(mascota.CantidadSeleccionada >= mascota.Cantidad)">
                                        <i class="bi bi-plus"></i>
                                    </button>
                                </div>
                            </div>

                            <div class="d-grid gap-2">
                                <button class="btn btn-primary" @onclick="() => AgregarAlCarrito(mascota)">
                                    <i class="bi bi-cart-plus"></i> Agregar al Carrito
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@if (mostrarAlerta)
{
    <div class="alert alert-success position-fixed top-0 end-0 m-3 shadow" role="alert" style="z-index: 1050; transition: opacity 0.5s ease-in-out; opacity: 1;">
        @mensajeAlerta
    </div>
}

@code {
    private List<ProyectoFinalAp1.Models.Mascotas> mascotas = new List<ProyectoFinalAp1.Models.Mascotas>();
    private string CriterioBusqueda = "Todos";
    private string TextoBusqueda = string.Empty;
    private int totalMascotas = 0;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private string mensajeAlerta = string.Empty;
    private bool mostrarAlerta = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarMascotas();
            totalMascotas = await carritoMascotasService.ObtenerTotalMascotasEnCarritoAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar mascotas: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task MostrarAlertaTemporal(string mensaje, int duracion = 2000)
    {
        mensajeAlerta = mensaje;
        mostrarAlerta = true;
        StateHasChanged();

        await Task.Delay(duracion);

        mostrarAlerta = false;
        StateHasChanged();
    }

    private async Task CargarMascotas()
    {
        try
        {
            var mascotasDb = await mascotasService.ListarMascotas();
            mascotas = mascotasDb?.ToList() ?? new List<ProyectoFinalAp1.Models.Mascotas>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al obtener mascotas: {ex.Message}";
            mascotas = new List<ProyectoFinalAp1.Models.Mascotas>();
            Console.WriteLine(errorMessage);
        }
    }

    private async Task BuscarMascotas()
    {
        try
        {
            var query = await mascotasService.ListarMascotas();

            if (!string.IsNullOrWhiteSpace(TextoBusqueda))
            {
                if (CriterioBusqueda == "Id" && int.TryParse(TextoBusqueda, out int id))
                {
                    query = query.Where(m => m.MascotaId == id).ToList();
                }
                else if (CriterioBusqueda == "Tipo")
                {
                    query = query.Where(m => m.Tipo.Contains(TextoBusqueda, StringComparison.OrdinalIgnoreCase)).ToList();
                }
                else if (CriterioBusqueda == "Raza")
                {
                    query = query.Where(m => m.Raza.Contains(TextoBusqueda, StringComparison.OrdinalIgnoreCase)).ToList();
                }
                else
                {
                    query = query.Where(m =>
                        m.Tipo.Contains(TextoBusqueda, StringComparison.OrdinalIgnoreCase) ||
                        m.Raza.Contains(TextoBusqueda, StringComparison.OrdinalIgnoreCase) ||
                        m.MascotaId.ToString().Contains(TextoBusqueda)).ToList();
                }
            }

            mascotas = query;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al buscar mascotas: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
        }
    }

    private async Task LimpiarFiltros()
    {
        TextoBusqueda = string.Empty;
        CriterioBusqueda = "Todos";
        await CargarMascotas();
    }

    private void AjustarCantidad(ProyectoFinalAp1.Models.Mascotas mascota, int cambio)
    {
        var nuevaCantidad = mascota.CantidadSeleccionada + cambio;
        mascota.CantidadSeleccionada = Math.Clamp(nuevaCantidad, 1, mascota.Cantidad);
    }

    private async Task AgregarAlCarrito(ProyectoFinalAp1.Models.Mascotas mascota)
    {
        if (mascota.CantidadSeleccionada < 1 || mascota.CantidadSeleccionada > mascota.Cantidad)
        {
            await JSRuntime.InvokeVoidAsync("alert", "La cantidad seleccionada no es válida");
            return;
        }

        try
        {
            await carritoMascotasService.AgregarAlCarritoMascotasAsync(
                mascota.MascotaId,
                mascota.CantidadSeleccionada,
                $"{mascota.Tipo} - {mascota.Raza}");

            totalMascotas = await carritoMascotasService.ObtenerTotalMascotasEnCarritoAsync();
            await MostrarAlertaTemporal("Mascota agregada al carrito", 2000);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
}