@page "/Carrito"
@using ProyectoFinalAp1.Services
@using ProyectoFinalAp1.Models
@inject CarritoService CarritoService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h2 class="text-center mb-4">Carrito de Compras</h2>

@if (carritoItems == null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p class="mt-2">Cargando carrito...</p>
    </div>
}
else if (!carritoItems.Any())
{
    <div class="alert alert-info text-center">
        <i class="bi bi-cart-x fs-4"></i>
        <p class="mt-2">No hay productos en el carrito</p>
        <a href="/Producto/Index" class="btn btn-primary mt-2">
            <i class="bi bi-arrow-left"></i> Seguir Comprando
        </a>
    </div>
}
else
{
    @if (!string.IsNullOrEmpty(mensajeError))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @mensajeError
            <button type="button" class="btn-close" @onclick="() => mensajeError = string.Empty"></button>
        </div>
    }
    @if (!string.IsNullOrEmpty(mensajeExito))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>
            @mensajeExito
            <button type="button" class="btn-close" @onclick="() => mensajeExito = string.Empty"></button>
        </div>
    }

    <div class="table-responsive">
        <table class="table table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Producto</th>
                    <th>Cantidad</th>
                    <th>Precio Unitario</th>
                    <th>Total</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in carritoItems)
                {
                    <tr>
                        <td>@item.Producto.Nombre</td>
                        <td>@item.Cantidad</td>
                        <td>@item.Producto.Precio.ToString("C")</td>
                        <td>@((item.Cantidad * item.Producto.Precio).ToString("C"))</td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-danger btn-sm me-2" @onclick="async () => await EliminarDelCarritoAsync(item.CarritoId)">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                                <button class="btn btn-success btn-sm" @onclick="async () => await ComprarProducto(item.CarritoId)">
                                    <i class="bi bi-cart-check"></i> Comprar
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-4 flex-wrap">
        <div class="d-flex flex-column mb-3">
            <h4 class="mb-3">
                <i class="bi bi-cash-coin"></i> Total: @carritoItems.Sum(item => item.Cantidad * item.Producto.Precio).ToString("C")
            </h4>
            <a href="/Producto/Index" class="btn btn-outline-primary align-self-start">
                <i class="bi bi-arrow-left"></i> Seguir Comprando
            </a>
        </div>

        <button class="btn btn-success" @onclick="ComprarTodo">
            <i class="bi bi-cart-check"></i> Comprar Todo
        </button>
    </div>
}

@code {
    private List<ProyectoFinalAp1.Models.Carrito> carritoItems = new List<ProyectoFinalAp1.Models.Carrito>();
    private string mensajeError = string.Empty;
    private string mensajeExito = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CargarCarrito();
    }

    private async Task CargarCarrito()
    {
        try
        {
            carritoItems = await CarritoService.ObtenerCarritoAsync();
            mensajeError = string.Empty;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al cargar el carrito: {ex.Message}";
            Console.WriteLine(mensajeError);
        }
    }

    private async Task EliminarDelCarritoAsync(int carritoId)
    {
        try
        {
            bool confirmado = await JSRuntime.InvokeAsync<bool>("confirm",
                "¿Está seguro que desea eliminar este producto del carrito?");

            if (!confirmado) return;

            var resultado = await CarritoService.EliminarDelCarritoAsync(carritoId);

            if (resultado)
            {
                carritoItems.RemoveAll(x => x.CarritoId == carritoId);
                mensajeExito = "Producto eliminado del carrito";
                mensajeError = string.Empty;
                StateHasChanged();

                await Task.Delay(3000);
                mensajeExito = string.Empty;
                StateHasChanged();
            }
            else
            {
                mensajeError = "No se pudo eliminar el producto del carrito";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al eliminar: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ComprarProducto(int carritoId)
    {
        try
        {
            bool confirmado = await JSRuntime.InvokeAsync<bool>("confirm",
                "¿Está seguro que desea comprar este producto?");

            if (!confirmado) return;

            var resultado = await CarritoService.ComprarProducto(carritoId);

            if (resultado)
            {
                carritoItems.RemoveAll(x => x.CarritoId == carritoId);
                mensajeExito = "Producto comprado y factura generada correctamente";
                mensajeError = string.Empty;
                StateHasChanged();

                await Task.Delay(3000);
                NavigationManager.NavigateTo("/Facturas/FacturaProductos");
            }
            else
            {
                mensajeError = "No se pudo completar la compra del producto";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al comprar el producto: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ComprarTodo()
    {
        try
        {
            bool confirmado = await JSRuntime.InvokeAsync<bool>("confirm",
                "¿Está seguro que desea comprar todos los productos del carrito?");

            if (!confirmado) return;

            var resultado = await CarritoService.ComprarCarrito();

            if (resultado)
            {
                carritoItems.Clear();
                mensajeExito = "Compra realizada y factura generada correctamente";
                mensajeError = string.Empty;
                StateHasChanged();

                await Task.Delay(3000);
                NavigationManager.NavigateTo("/Facturas/FacturasProducto");
            }
            else
            {
                mensajeError = "No se pudo completar la compra del carrito";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al comprar: {ex.Message}";
            StateHasChanged();
        }
    }
}