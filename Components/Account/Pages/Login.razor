@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ProyectoFinalAp1.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="d-flex justify-content-center align-items-center mt-5 mb-5">
    <div class="col-lg-6">
        <section class="card p-5 shadow-lg rounded-4 text-center">
         
            <div class="d-flex justify-content-center">
                <img src="favicon.svg" alt="Logo" class="rounded-circle shadow-sm bg-light p-2"
                     width="125" height="125" />
            </div>

            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2 class="fs-4">Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger fs-5" role="alert" />

                <!-- Email Input -->
                <div class="mb-3">
                    <InputText @bind-Value="Input.Email" id="Input.Email"
                               class="form-control fs-5 rounded-pill border-0 shadow-sm bg-light p-3"
                               autocomplete="username" aria-required="true" placeholder="Email" />
                    <ValidationMessage For="() => Input.Email" class="text-danger fs-6 mt-1" />
                </div>

                <!-- Password Input -->
                <div class="mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password"
                               class="form-control fs-5 rounded-pill border-0 shadow-sm bg-light p-3"
                               autocomplete="current-password" aria-required="true" placeholder="Password" />
                    <ValidationMessage For="() => Input.Password" class="text-danger fs-6 mt-1" />
                </div>

                <!-- Remember Me Checkbox -->
                <div class="form-check mb-3">
                    <label class="form-check-label fs-5">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input fs-5" />
                        Remember me
                    </label>
                </div>

                <!-- Submit Button -->
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary p-2 fs-5 rounded-pill shadow-sm">
                        Log in
                    </button>
                </div>

                <!-- Links -->
                <div class="text-center mt-3 fs-5">
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                            Register as a new user
                        </a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
